/* mixins */

/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
   `@include font-size(10px);`
 *
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
@mixin font-size($font-size, $important: false, $line-height:true){
    @if $important == important {
      font-size: rem($font-size) !important;
    } @else { 
      font-size: rem($font-size);
    }

    line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
}

@mixin calc($property, $expression) { 
  #{$property}: -webkit-calc(#{$expression}); 
  #{$property}: calc(#{$expression}); 
} 

/**
 * simplify browser prefix insertion
 */
@mixin vendor-prefix($name, $argument) {
  -webkit-#{$name}: #{$argument};
      -ms-#{$name}: #{$argument};
     -moz-#{$name}: #{$argument};
       -o-#{$name}: #{$argument};
          #{$name}: #{$argument};
}


/**
 * Transform mixins
 */
 @mixin transform($property: none) {
//  none | <transform-function>
  @include vendor-prefix(transform, $property);
}

@mixin transform-origin($axes: 50%) {
// x-axis - left | center | right  | length | %
// y-axis - top  | center | bottom | length | %
// z-axis -                          length
  @include vendor-prefix(transform-origin, $axes);
}

@mixin transform-style ($style: flat) {
  @include vendor-prefix(transform-style, $style);
}

// Breakpoint mixins
// This is a single max-width to handle rare cases where we do not want to use mobile first and directly target the smallest screen sizes. 
@mixin rwd-b1Max () {
  @media (max-width: em($breakpoint1)) { @content }
}

@mixin rwd-b2Max () {
  @media (max-width: em($breakpoint2)) { @content }
}

@mixin rwd-b3Max () {
  @media (max-width: em($breakpoint3)) { @content }
}

@mixin rwd-b4Max () {
  @media (max-width: em($breakpoint4)) { @content }
}

@mixin rwd-b1 () {
  @media (min-width: em($breakpoint1)) { @content }
}

@mixin rwd-b2 () {
  @media (min-width: em($breakpoint2)) { @content }
}

@mixin rwd-b3 () {
  @media (min-width: em($breakpoint3)) { @content }
}

@mixin rwd-b4 () {
  @media (min-width: em($breakpoint4)) { @content }
}

@mixin rwd-b5 () {
  @media (min-width: em($breakpoint5)) { @content }
}

@mixin rwd-b1tob2 () {
  @media (min-width: em($breakpoint1)) and (max-width: em($breakpoint2)) { @content }
}

@mixin rwd-b1tob3 () {
  @media (min-width: em($breakpoint1)) and (max-width: em($breakpoint3)) { @content }
}

@mixin rwd-b1tob4 () {
  @media (min-width: em($breakpoint1)) and (max-width: em($breakpoint4)) { @content }
}

@mixin rwd-b1tob5 () {
  @media (min-width: em($breakpoint1)) and (max-width: em($breakpoint5)) { @content }
}

@mixin rwd-b2tob3 () {
  @media (min-width: em($breakpoint2)) and (max-width: em($breakpoint3)) { @content }
}

@mixin rwd-b2tob4 () {
  @media (min-width: em($breakpoint2)) and (max-width: em($breakpoint4)) { @content }
}

@mixin rwd-b2tob5 () {
  @media (min-width: em($breakpoint2)) and (max-width: em($breakpoint5)) { @content }
}

@mixin rwd-b3tob4 () {
  @media (min-width: em($breakpoint3)) and (max-width: em($breakpoint4)) { @content }
}

@mixin rwd-b3tob5 () {
  @media (min-width: em($breakpoint3)) and (max-width: em($breakpoint5)) { @content }
}

@mixin rwd-b4tob5 () {
  @media (min-width: em($breakpoint4)) and (max-width: em($breakpoint5)) { @content }
}


/* Shadows */

// Focus shadow mixin.
@mixin focus-shadow() {
  box-shadow: 0 0 8px rgba(0, 0, 0, .18), 0 8px 16px rgba(0, 0, 0, .36);
}

@mixin shadow-2dp() {
  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, $shadow-key-penumbra-opacity),
              0 3px 1px -2px rgba(0, 0, 0, $shadow-key-umbra-opacity),
              0 2px 5px 0 rgba(0, 0, 0, $shadow-ambient-shadow-opacity);
}
@mixin shadow-3dp() {
  box-shadow: 0 3px 4px 0 rgba(0, 0, 0, $shadow-key-penumbra-opacity),
              0 3px 3px -2px rgba(0, 0, 0, $shadow-key-umbra-opacity),
              0 3px 8px 0 rgba(0, 0, 0, $shadow-ambient-shadow-opacity);
}
@mixin shadow-4dp() {
  box-shadow: 0 4px 5px 0 rgba(0, 0, 0, $shadow-key-penumbra-opacity),
              0 1px 10px 0 rgba(0, 0, 0, $shadow-ambient-shadow-opacity),
              0 2px 4px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity);
}
@mixin shadow-6dp() {
  box-shadow: 0 6px 10px 0 rgba(0, 0, 0, $shadow-key-penumbra-opacity),
              0 1px 18px 0 rgba(0, 0, 0, $shadow-ambient-shadow-opacity),
              0 3px 5px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity);
}
@mixin shadow-8dp() {
  box-shadow: 0 8px 10px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity),
              0 3px 14px 2px rgba(0, 0, 0, $shadow-ambient-shadow-opacity),
              0 5px 5px -3px rgba(0, 0, 0, $shadow-key-umbra-opacity);
}

@mixin shadow-16dp() {
  box-shadow: 0 16px 24px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity),
              0  6px 30px 5px rgba(0, 0, 0, $shadow-ambient-shadow-opacity),
              0  8px 10px -5px rgba(0, 0, 0, $shadow-key-umbra-opacity);
}